<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/05/20/sudy/"/>
      <url>/2022/05/20/sudy/</url>
      
        <content type="html"><![CDATA[<h1 id="资料整理"><a href="#资料整理" class="headerlink" title="资料整理"></a>资料整理</h1><h4 id="1-DOM元素的获取"><a href="#1-DOM元素的获取" class="headerlink" title="1.DOM元素的获取"></a>1.DOM元素的获取</h4><ol><li>ID名的获取方式:getElementById</li><li>元素名的获取方式:getElementsByTagName</li><li>类名的获取方式getElementsByClassName</li><li>H5新增的获取方式: querySelector       只能获取到第一个元素</li><li>H5新增的获取方式: querySelectorAll</li></ol><h4 id="2-事件注册的方式-2种-各有什么特点"><a href="#2-事件注册的方式-2种-各有什么特点" class="headerlink" title="2.事件注册的方式(2种,各有什么特点)"></a>2.事件注册的方式(2种,各有什么特点)</h4><ol><li>传统注册事件方式:btn.onclick = function() {}   onlick类型注册事件,需要加on 同一个类型注册事件之后会被后一个覆盖.            解绑事件:btn.onclick = null</li><li>监听注册事件方式:btn.addEventListener(‘click’,  function(){})   click类型注册事件,不需要加on同一个类型可以注册多个事件.     移除监听 btn.removeEventListener(‘click’, fn)</li></ol><h4 id="3-innerText-与innerHTML-的区别"><a href="#3-innerText-与innerHTML-的区别" class="headerlink" title="3.innerText 与innerHTML 的区别"></a>3.innerText 与innerHTML 的区别</h4><ol><li>innerText不识别标签 空格,只能进行内容的添加</li><li>innerHTML识别标签空格,可以同时添加标签以及内容</li></ol><h4 id="4-页面加载事件"><a href="#4-页面加载事件" class="headerlink" title="4.页面加载事件"></a>4.页面加载事件</h4><ol><li><p>方式一 :  window.onload = function(){}       window.addEventListener(“load”,function(){})</p></li><li><p>方式二 :  window.addEventListener(‘DOMContentLoaded’,function(){})</p></li></ol><h4 id="5-js基础-数组方法-变量命名-表达式等-隐式转换"><a href="#5-js基础-数组方法-变量命名-表达式等-隐式转换" class="headerlink" title="5.js基础 数组方法 变量命名 表达式等 隐式转换"></a>5.js基础 数组方法 变量命名 表达式等 隐式转换</h4><h4 id="6-css权重相关-伪元素-伪类"><a href="#6-css权重相关-伪元素-伪类" class="headerlink" title="6.css权重相关,伪元素,伪类"></a>6.css权重相关,伪元素,伪类</h4><ol><li><p>css权重: !important无穷大 &gt; 行内样式1000 &gt; ID选择器100 &gt; 类选择器,伪类选择器 10 &gt; 元素选择器1 &gt; 继承或者通配符选择器0</p></li><li><p>伪元素:    :before 在…..之前创建    :after 在…..之后创建    伪元素是创建了一个新元素，而伪类本身就存在只不过不用特别声明</p></li><li><p>伪类 :   :hover 鼠标触碰事件    : focus 焦点事件       伪元素只能同时使用一个，伪类可以同时使用多个</p></li></ol><h4 id="7-flex相关-居中定位"><a href="#7-flex相关-居中定位" class="headerlink" title="7.flex相关,居中定位"></a>7.flex相关,居中定位</h4><p>在css标签内，通过display设置div为flex布局，将flex-direction属性设置为column 此时为更换主轴方向，实现元素垂直排列，将justify-content属性设置为center，实现div内元素在垂直方向居中对齐，将align-items属性设置为center，实现div内元素水平方向居中对齐</p><h4 id="8-作用域相关-变量函数等提升"><a href="#8-作用域相关-变量函数等提升" class="headerlink" title="8.作用域相关,变量函数等提升"></a>8.作用域相关,变量函数等提升</h4><h4 id="9-em-rem"><a href="#9-em-rem" class="headerlink" title="9.em,rem"></a>9.em,rem</h4><ol><li>rem是基于html元素的字体大小来决定</li><li>em则根据使用它的元素的大小决定  1em = 相对元素大小</li></ol><h4 id="10-transfrom-animation"><a href="#10-transfrom-animation" class="headerlink" title="10.transfrom animation"></a>10.transfrom animation</h4><h4 id="11-offset-client-scroll-系列"><a href="#11-offset-client-scroll-系列" class="headerlink" title="11.offset  client  scroll 系列"></a>11.offset  client  scroll 系列</h4><ol><li><p>offsetWidth/offsetHeight获取到的大小 包含 padding + border + width</p></li><li><p>offsetLeft , offsetTop :</p><p>获得元素距离带有定位父元素的位置,返回值不带单位<br>什么叫定位父元素 : position =&gt; absoluter,fixed,relative,sticky ,除了static .<br>如果父元素没有定位,那么久以body为参考</p></li><li><p>client 宽度 和我们offsetWidth 最大的区别就是 不包含边框</p></li><li><p>scorll 滚动滚动事件</p></li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// scroll 系列</span><br><span class="line">       var div = document.querySelector('div');</span><br><span class="line">       console.log(div.scrollHeight);</span><br><span class="line">       console.log(div.clientHeight);</span><br><span class="line">       // scroll滚动事件当我们滚动条发生变化会触发的事件</span><br><span class="line">       div.addEventListener('scroll', function() {</span><br><span class="line">           console.log(div.scrollTop);</span><br><span class="line">       })</span><br><span class="line">       // 页面滚动事件的监听</span><br><span class="line">       document.addEventListener('scroll',function(){</span><br><span class="line">           console.log(window.pageYOffset)</span><br><span class="line">       })</span><br></pre></td></tr></tbody></table></figure><p>####12.节点操作 ,节点属性</p><p>节点操作</p><table><thead><tr><th align="center">概念</th><th align="left">网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</th></tr></thead><tbody><tr><td align="center">父节点</td><td align="left">node.parentNode</td></tr><tr><td align="center">子节点</td><td align="left">所有子节点：node.childNodes       实际开发中  :   第一个元素子节点  node.children[0]    最后一个元素子节点node.children[node.children.length - 1 ]</td></tr><tr><td align="center">兄弟节点</td><td align="left">下一个兄弟元素节点：node.nextElementSibling      上一个兄弟元素节点： node.previousElementSibling</td></tr><tr><td align="center">创建节点</td><td align="left">document.createElement(‘tagName’)</td></tr><tr><td align="center">添加节点</td><td align="left">后面添加：node.appendChild(child)            前面添加：node.insertBefore(child, 指定元素)                           node：父元素，child要插入的元素，在指定元素之前插入</td></tr></tbody></table><p>节点属性</p><table><thead><tr><th align="center">删除节点</th><th><strong>node.removeChild(child)</strong></th></tr></thead><tbody><tr><td align="center">复制节点</td><td>var dupNode = node.cloneNode()</td></tr><tr><td align="center">创建元素的方式</td><td>方式一  :   element.innerHTML     方式二 :   document.createElement()</td></tr></tbody></table><h4 id="13-盒模型"><a href="#13-盒模型" class="headerlink" title="13.盒模型"></a>13.盒模型</h4><p>box-sizing：border-box;   设置之后盒子实际宽度不受padding与border影响</p><h4 id="14-事件委托"><a href="#14-事件委托" class="headerlink" title="14.事件委托"></a>14.事件委托</h4><p>给父节点设置监听事件,利用事件冒泡影响每一个子节点</p><h4 id="15-this指向"><a href="#15-this指向" class="headerlink" title="15.this指向"></a>15.this指向</h4><ol><li>全局作用域中 this指向全局对象window</li><li>定时器里面的this指向window, (不是箭头函数的时候)</li><li>方法调用中谁调用this指向谁</li><li>构造函数中this指向构造函数的实例</li></ol><h4 id="16-js执行机制"><a href="#16-js执行机制" class="headerlink" title="16.js执行机制"></a>16.js执行机制</h4><ol><li>我们先判断Js任务是同步任务还是异步任务,所有的同步任务都放入主线程的执行栈中执行</li><li>异步任务会提交给异步进程,比如click事件,setTimeout等,当满足触发条件,异步进程会将异步任务放入任务队列中</li><li>当主线程中所有的(所有的,所有的)同步任务执行完后,会去任务队列中查找是否有异步任务,如果有,拿到主线程中执行,执行完后,再去任务队列中查找,不断循环</li></ol><h4 id="17-new"><a href="#17-new" class="headerlink" title="17.new"></a>17.new</h4><p>  new关键字执行过程:</p><ul><li>​       new 构造函数可以在内存中创建一个空的对象</li><li>​       his 就会指向刚才创建的空对象</li><li>​        开始执行构造函数里面的代码 给这个空对象添加属性和方法</li><li>​        返回这个对象</li></ul><h4 id="18-数据类型"><a href="#18-数据类型" class="headerlink" title="18.数据类型"></a>18.数据类型</h4><ol><li>基本数据类型 （Number,String,Boolean,Undefifined,Null，symbol，bigInt）</li><li>引用数据类型 （object，Array)</li></ol><h4 id="19-sessionStorage-localStorage"><a href="#19-sessionStorage-localStorage" class="headerlink" title="19.sessionStorage ,localStorage"></a>19.sessionStorage ,localStorage</h4><ol><li>声明周期的区别 : localStorage是永久存储在浏览器中，只要当用户不删除数据，则该数据就会一直存放在localStorage中。sessionStorage也就是当用户关闭浏览器，此时数据就会被销毁</li><li>存储大小：localStorage和sessionStorage存储大小都是5MB。</li><li>存储内容类型：localStorage和sessionStorage只能存储字符串类型，如果遇到其他类型，则可以使用JSON对象的stringify和parse进行处理。</li><li>获取方式：</li></ol><ul><li><p>localStorage: window.localStorage</p></li><li><p>sessionStorage: window.sessionStorage。</p><p>应用场景：localStorage用于长期登录，sessionStorage用于敏感账号的登录。</p></li></ul><h4 id="20-全选与反选操作"><a href="#20-全选与反选操作" class="headerlink" title="20.全选与反选操作"></a>20.全选与反选操作</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        // 1.获取元素</span><br><span class="line">        var iptAll = document.querySelector('#j_cbAll')</span><br><span class="line">        var ipts  = document.querySelector('#j_tb').querySelectorAll('input')</span><br><span class="line">        console.log(ipts)</span><br><span class="line">        // 2.绑定循环事件</span><br><span class="line">        // 给全选框添加事件</span><br><span class="line">        iptAll.addEventListener('click',function(){</span><br><span class="line">            for (var i = 0; i &lt; ipts.length;i++){</span><br><span class="line">                ipts[i].checked = this.checked</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">        // 给下方的选择框添加事件</span><br><span class="line">        var tbody = document.querySelector('#j_tb')</span><br><span class="line">        tbody.addEventListener('click',function(){</span><br><span class="line">            var flag = true</span><br><span class="line">            for (var i = 0; i &lt; ipts.length; i++) {</span><br><span class="line">                // !ipts[i].checked 代表只要有一个为false 则执行里面的语句 否则不执行</span><br><span class="line">                if (!ipts[i].checked) {</span><br><span class="line">                    iptAll.checked = false</span><br><span class="line">                    flag = false</span><br><span class="line">                } else {</span><br><span class="line">                    iptAll.checked = flag</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">        </span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="21-动态生成表格案例上移下移删除操作"><a href="#21-动态生成表格案例上移下移删除操作" class="headerlink" title="21.动态生成表格案例上移下移删除操作"></a>21.动态生成表格案例上移下移删除操作</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       // 1.先去准备好学生的数据</span><br><span class="line">       var datas = [{</span><br><span class="line">           name: '魏璎珞',</span><br><span class="line">           subject: 'JavaScript',</span><br><span class="line">           score: 100</span><br><span class="line">       }, {</span><br><span class="line">           name: '弘历',</span><br><span class="line">           subject: 'JavaScript',</span><br><span class="line">           score: 98</span><br><span class="line">       }, {</span><br><span class="line">           name: '傅恒',</span><br><span class="line">           subject: 'JavaScript',</span><br><span class="line">           score: 99</span><br><span class="line">       }, {</span><br><span class="line">           name: '明玉',</span><br><span class="line">           subject: 'JavaScript',</span><br><span class="line">           score: 88</span><br><span class="line">       }, {</span><br><span class="line">           name: '大猪蹄子',</span><br><span class="line">           subject: 'JavaScript',</span><br><span class="line">           score: 0</span><br><span class="line">       }];</span><br><span class="line">       var tbody = document.querySelector('tbody')</span><br><span class="line">       for (var i = 0; i &lt; datas.length; i++ ){</span><br><span class="line">           // 先创建行 tr</span><br><span class="line">           var tr = document.createElement('tr')</span><br><span class="line">           tbody.appendChild(tr)</span><br><span class="line">           // 再创建列 td</span><br><span class="line">           for (var k in datas[i]) {</span><br><span class="line">               var td = document.createElement('td')</span><br><span class="line">               td.innerHTML = datas[i][k]</span><br><span class="line">               tr.appendChild(td)</span><br><span class="line">           }</span><br><span class="line">           // 创建删除/上移/下移的td</span><br><span class="line">           var td = document.createElement('td')</span><br><span class="line">           td.innerHTML = '&lt;button class = "del"&gt;删除&lt;/button&gt;&lt;button class = "top"&gt;上移&lt;/button&gt;&lt;button class = "down"&gt;下移&lt;/button&gt;'</span><br><span class="line">           tr.appendChild(td)</span><br><span class="line">       }</span><br><span class="line">       // 获取删除/上移/下移按钮元素</span><br><span class="line">       var dels = document.querySelectorAll('.del')</span><br><span class="line">       var tops = document.querySelectorAll('.top')</span><br><span class="line">       var downs = document.querySelectorAll('.down')</span><br><span class="line">       var trs = tbody.querySelectorAll('tr')</span><br><span class="line">       console.log(trs)</span><br><span class="line">       console.log(tops)</span><br><span class="line"></span><br><span class="line">       tbody.addEventListener('click',function(e){</span><br><span class="line">       for (var i = 0 ; i &lt; dels.length ; i++) {</span><br><span class="line">           var tr = e.target.parentNode.parentNode</span><br><span class="line">           // tbody = this</span><br><span class="line">           var tr_ps = tr.previousElementSibling // tr的上一个兄弟节点</span><br><span class="line">           var tr_next = tr.nextElementSibling // tr的下一个兄弟节点</span><br><span class="line">           if (e.target == dels[i]) { // 当点击删除按钮时</span><br><span class="line">               this.removeChild(tr)</span><br><span class="line">           } else if (e.target == tops[i]) { // 当点击到上移按钮时   上移操作</span><br><span class="line">               while(tr_ps &amp;&amp; tr_ps.nodeType != 1) { // tr存在上一个兄弟节点 且 兄弟节点不属于元素节点时</span><br><span class="line">                   tr_ps = tr_ps.previousElementSibling</span><br><span class="line">               }</span><br><span class="line">               if (tr_ps) { //  tr 存在上一个兄弟节点</span><br><span class="line">                   this.insertBefore(tr,tr_ps) // 交换位置</span><br><span class="line">               }</span><br><span class="line">           } else if (e.target == downs[i]) {</span><br><span class="line">               while(tr_next &amp;&amp; tr_next.nodeType != 1) { // 同理</span><br><span class="line">                   tr_next = tr_next.nextElementSibling</span><br><span class="line">               }</span><br><span class="line">               if (tr_next) { //  tr 存在下一个兄弟节点</span><br><span class="line">                   this.insertBefore(tr_next,tr) // 交换位置</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       })</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/19/hello-world/"/>
      <url>/2022/05/19/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
